<?xml version="1.0" encoding="UTF-8"?>
<section xmlns:xi="http://www.w3.org/2001/XInclude" xml:id="sec_prodSomme">
<title>Méthodes de dénombrement: Principes de base</title>
<introduction> 

<p>Dans ce chapitre, nous allons étudier les différentes méthodes permettant de compter des objets ayant certaines propriétés. Les techniques de dénombrement sont basées sur des principes relativement simples, mais peuvent demander beaucoup d'ingéniosité afin de dénombrer les bons objets, ne pas en oublier et les compter une seule fois!</p>
<p>Lorsqu'on veut dénombrer certains objets, il est souvent utile de penser au problème comme si l’on voulait accomplir la tâche et de compter le nombre de façons différentes d'accomplir cette tâche. En particulier, on va souvent décrire les problèmes de dénombrement en termes du nombre de façons de choisir certains objets.</p>
<p>Dans cette section, nous étudierons les principes du produit et de la somme et leur variante.</p>
</introduction>
<subsection  xml:id="subs-regleProd">
<title>Principe du produit</title>
<introduction>
  <p>
    Lorsqu'on veut compter le nombre de façons différentes d'accomplir une tâche, il est souvent plus efficace de séparer la tâche en différentes étapes plus simples. On doit alors compter le nombre de façons d'accomplir chacune des étapes, et ensuite multiplier ces nombres pour obtenir le résultat. C'est ce qu'on appelle le principe du produit. On considère un exemple de base avant d'énoncer le principe en général. 
  </p>
</introduction>
<example xml:id="ex-introProdCostumes">
  <title>Le nombre de costumes</title>
  <statement><p>Supposons qu'un de vos amis doit choisir un costume pour animer un spectacle. Si votre ami  doit choisir parmi 3 chapeaux, 6 chandails et 4 pantalons. De combien de façons différentes peut-il s'habiller? </p></statement>
  <solution>On sépare la tâche de choisir le costume en trois étapes: choisir le chapeau, choisir le chandail et finalement choisir les pantalons. Il y a 3 façons d'exécuter la première tâche, 6 façons d'exécuter la deuxième tâche et 4 façons d'exécuter la troisième. Ainsi, au total, il y a <m>3\cdot 6\cdot 4 =72</m> façons de choisir un costume différent. </solution>
</example>
 
<remark xml:id="rem-ordreChoixOrdre">
  À l'exemple <xref ref="ex-introProdCostumes"/>, l'ordre dans lequel on exécute chacune des tâches n'a pas d'importance. Si votre ami choisit son chapeau en premier, ou bien il peut choisir son chandail en premier, et le nombre de costumes ne change pas. Ainsi, lorsqu'on veut dénombrer les costumes, on peut décider d'un ordre arbitraire (par exemple, chapeau, chandail, pantalons).
</remark>

<p>
  Le principe utilisé à l'exemple précédent est ce qu'on appelle le principe du produit. On le nomme parfois aussi le principe du ET, car on doit faire un premier choix, ET ensuite faire un deuxième choix. En langage plus formel, le principe du produit peut s'énoncer de deux façons. 
</p>


<proposition xml:id="prop-regleProd">
<title>Principe du produit</title>
<ol>
<li>Supposons qu'une procédure peut être séparée en une séquence de deux tâches. S'il existe <m>n_1</m> façons d'exécuter la première tâche, et <m>n_2</m> façons d'exécuter la deuxième tâche, alors il y a <m>n_1n_2</m> façons d'exécuter la procédure. </li>
<li>Soit <m>A</m> et <m>B</m> deux ensembles, alors <m>|A\times B|=|A|\cdot |B|</m>, c'est-à-dire que la cardinalité du produit cartésien est le produit des cardinalités.</li>
</ol>
</proposition>

<example xml:id="ex-baseProd" > 
<title> Exemples de base du principe du produit</title>
<introduction> On veut compter le nombre de façons d'accomplir chacune des tâches suivantes.</introduction>
<task> 
<statement>Une compagnie formée de seulement deux employés, Damien et Laura, loue un étage d'un immeuble de bureaux. Si cet étage possède 15 bureaux, de combien de manières peut-on assigner un bureau à chaque employé?</statement>
<solution> Pour assigner un bureau à chaque employé, on commence à assigner un bureau à Laura, puis on assigne un bureau à Damien. Il y a 15 bureaux possibles pour Laura. Ensuite, il reste 14 bureaux possibles pour Damien. Ainsi, il y a <m>15\cdot 14 = 210 </m> façons d'assigner un bureau à chaque employé.</solution>
<answer><m> 210 </m></answer>
</task>
<task> 
<statement>Les chaises d'un auditorium sont étiquetées à l'aide d'une lettre un d'un nombre entier de 1 à 100. Combien de chaise peut-on étiqueter de cette façon.</statement>
<solution>Pour étiqueter une chaise, on doit d'abord choisir une lettre, et ensuite choisir un nombre entier de 1 à 100. Il y a 26 choix possibles pour la lettre, et 100 choix possibles pour l'entier. On peut donc étiqueter <m>26\cdot 100 = 2600</m> chaises.</solution>
<answer><m> 2600</m></answer>
</task>
<task> 
<statement>Combien de plaques d'immatriculation peut-on obtenir, si une plaque est formée de 3 lettres suivies de trois chiffres si l’on accepte toutes les séquences possibles?</statement>
<solution> Pour chaque lettre, il y a 26 choix possibles. Pour chaque chiffre, il y a 10 choix possibles. Il y a donc <m>26\cdot 26\cdot 26 \cdot 10\cdot 10\cdot 10 = 17576000</m> possibilités.</solution>
<answer><m> 17576000</m></answer>
</task>
</example>

<p>
  À l'exercice <xref ref="exo-nbrFonctions"/>, on a considérer le nombres de fonctions, de fonctions injectives et de fonctions surjective allant de <m>A=\{0,1\}</m> vers <m>B=\{a,b,c\}</m>.  Puisque ces ensembles sont assez petits, on a pû énumérer toutes ces fonctions directement. On veut maintenant utiliser le principe du produit pour compter le nombre de fonctions et le nombre de fonctions injectives allant de <m>A</m> vers <m>B</m>. Par la suite, on va généraliser à des ensembles quelconques.
</p>

<example xml:id="nbrFonctionsProd">
  <title> Retour sur le nombre de fonctions</title>
 <introduction> <p>Soit <m>A=\{0,1\}</m> et <m>B=\{a,b,c\}</m>. </p> </introduction>
<task>
  <statement>Combien y a-t-il de fonctions <m>f:A\to B</m>?</statement>
  <solution>
    <p>On compte le nombre de façons qu'il y a de définir une telle fonction <m>f</m>. Pour se faire, on sépare la tâche en deux étapes: choisir la valeur de <m>f(0)</m> et ensuite choisir la  valeur de <m>f(1)</m>.</p>
    <p>Lorsqu'on choisit la valeur de <m>f(0)</m>, on a trois choix possibles: <m>f(0)=a</m>, <m>f(0)=b</m> ou bien <m>f(0)=c</m>.</p>  
    <p>Une fois qu'on a choisit <m>f(0)</m>, on doit choisir <m>f(1)</m>. Encore une fois, on a trois choix possibles: <m>f(1)=a</m>, <m>f(1)=b</m> ou bien <m>f(1)=c</m>.</p>
    <p>Par le principe du produit, il y a alors <m>3\cdot 3 =9</m> façons différentes de choisir une fonction <m>f:A\to B</m>.</p>
    <p>On remarque encore une fois que le fait de choisir <m>f(0)</m> avant <m>f(1)</m> n'a pas d'importance. Puisque cela n'a pas d'importance, on peut donc décider d'un ordre arbitraire.</p>
  </solution>
</task>
<task>
  <statement>Combien y a-t-il de fonctions injectives <m>f:A\to B</m>?</statement>
  <solution>
    <p>Comme à la partie précédente, on compte le nombre de façons qu'il y a de définir une telle fonction <m>f</m>. Pour se faire, on sépare la tâche en deux étapes: choisir la valeur de <m>f(0)</m> et ensuite choisir la  valeur de <m>f(1)</m>.</p>
    <p>Lorsqu'on choisit la valeur de <m>f(0)</m>, on a trois choix possibles: <m>f(0)=a</m>, <m>f(0)=b</m> ou bien <m>f(0)=c</m>.</p>  
    <p>Une fois qu'on a choisi <m>f(0)</m>, on doit choisir <m>f(1)</m>. Attention! Ici, on veut une fonction injective! Supposons par exemple que <m>f(0)=c</m>, il ne reste alors que <em>deux choix possibles</em>:  <m>f(1)=a</m> ou bien <m>f(1)=b</m>. La même chose est vraie si l'on avait choisi une autre valeur pour <m>f(0)</m>, il ne resterait que deux choix possibles pour <m>f(1)</m>.</p>
    <p>Par le principe du produit, il y a alors <m>3\cdot 2 =6</m> façons différentes de choisir une fonction injective <m>f:A\to B</m>.</p>
  </solution>
</task>
</example>

<remark>
  Le cas des fonctions surjectives est beaucoup plus complexe. On étudiera ce cas dans une prochaine section <xref provisional="exe-nbrFonctionsSurj"/>. 
</remark>

<p>
  On veut maintenant généraliser l'exemple précédent à des ensembles finis quelconques.
</p>

<example xml:id="ex-comptFonction">
<title> Compter des fonctions : Cas général</title>
<introduction> Soit deux ensembles <m>A</m> et <m>B</m> tels que <m>|A|=m</m> et <m>|B|=n</m>. </introduction>
<task>
<statement>Combien de fonctions différentes <m>f: A\rightarrow B</m> existe-t-il?</statement>
<solution> Pour chaque élément <m>a\in A</m>, on doit choisir la valeur de <m>f(a)</m>. Ainsi, pour chaque <m>a\in A</m>,il y a <m>n</m> possibilités pour <m>f(a)</m>. Puisqu'on doit faire <m>m</m> choix et qu'il y a <m>n</m> possibilités, pour chacun de ces choix, par le principe du produit, il y aura <m> n\cdot n\cdot \cdots \cdot n =n^m</m> fonctions différentes.  </solution>
<answer><m> n^m </m></answer>
</task>
<task xml:id="ex_comptFctInj">
<statement>Combien de fonctions injectives différentes <m>f: A\rightarrow B</m> existe-t-il?</statement>
<answer><m>n\cdot (n-1)\cdot \cdots \cdot (n-(m-1)) </m> si <m>m\leq n</m>, <m>0</m> sinon.</answer>
<solution> 
  <p>Supposons qu'on étiquette les éléments de <m>A</m> par <m>a_1,a_2,\dots,a_m</m>. On commence par choisir la valeur de <m>f(a_1)</m>. Il y a <m>n</m> choix possible. On note cette valeur  <m>b_1</m>, c'est-à-dire que <m>f(a_1)=b_1</m>.</p>
  <p> On veut maintenant choisir la valeur de <m>f(a_2)</m>. Puisque <m>f</m> est injective, <m>f(a_2)\neq b_1</m>. Il reste donc <m>n-1</m> choix pour <m>f(a_2)</m>. On veut poursuivre ce raisonement de façon général pour tout les éléments de <m>A</m>. </p>
  <p>Supposons qu'on ait choisi les valeurs de <m>f(a_i)</m> pour tous les <m>k</m> premières valeurs de <m>i</m>, c'est-à-dire pour <m>1\leq i \leq k \lt m</m>, et qu'on veut maintenant choisir la valeur de <m>f(a_{k+1})</m>. Puisque <m>f</m> est injective, on aura que <m>f(a_{k+1})\neq f(a_i)</m> pour <m>1\leq i \leq k \lt m</m>. Il reste donc <m>n-k</m> choix pour la valeur de <m>f(a_{k+1})</m>. On répète cette démarche jusqu'à ce qu'on ait défini <m>f(a_m)</m>.  </p> 
  <p> On remarque d'ailleurs que si <m>m\gt n</m>, on ne peut pas trouver de fonction injective (car on ne pourra pas trouver de valeur pour tous les <m>f(a_i)</m>).</p> Ainsi, par le principe du produit, il y aura <m> (n)\cdot (n-1)\cdot \cdots \cdot( n-(m-1) )</m> fonctions injectives différentes. En effet, lorsqu'on veut choisir la valeur de <m>f(a_m)</m>, il restera <m>m-1</m> choix possible (attention aux indices!).</solution>
</task>
</example>

<p>
  À la section <xref ref="sec-ens"/>, on a introduit, pour un ensemble <m>A</m>,  l'ensemble <m>\mathscr{P}(A)</m>  des puissances de <m>A</m> (voir <xref ref="def-enspuiss"/>). On avait remarqué que la cardinalité de <m>\mathscr{P}(A)</m>  semblait être donnée par <m>|\mathscr{P}(A)|= 2^{|A|}</m>. On utilise le principe du produit sur un exemple avant de généraliser ce résultat à un ensemble de taille fini quelconque. 
</p>

<example xml:id="exe-nbrSousEnsIntro">
  <title>Retour sur l'ensemble des puissances</title>
  <statement><p>On considère l'ensemble <m>A=\{a,b,c\}</m>. On sait que <m>|\mathscr{P}(A)|=2^3</m>, car on a décrit  <m>\mathscr{P}(A)</m> en extension à la section <xref ref="sec-ens"/>.</p> 
  <p> On veut utiliser le principe du produit pour arriver à la même conclusion. On pourra ensuite généraliser au cas où <m>|A|=n</m>.</p></statement>
  <solution>
    <p>
      On veut dénombrer le nombre de sous-ensembles différents de <m>A</m>. Ceci revient à compter le nombre de façons différentes qu'on peut construire un tel sous-ensemble <m>E \subseteq A</m>.
    </p>
    <p>
      Pour se faire, on sépare la tâche "construire <m>E</m>" en trois étapes. On commence par choisir si <m>a \in E</m>. Il y a deux choix possibles (oui ou non). On choisit ensuite si <m>b\in E</m>. Il y a deux choix possibles (oui ou non). Finalement, on choisit si <m>c\in E</m>. Encore une fois, il y a deux choix possibles.
    </p>
    <p>
      Par le principe du produit, il y a <m>2\cdot 2\cdot 2 = 2^3=8</m> façons différentes de choisir un ensemble <m>E\in \mathscr{P}(A)</m>, et donc <m>|\mathscr{P}(A)|=2^3</m>.
    </p>
  </solution>
</example>

<p>
  En utilisant un argument similaire, on peut déterminer la taille de l'ensemble des puissances pour un ensemble fini de taille quelconque.
</p>

<example xml:id="exe-nbrSousEns">
<title>L'ensemble des puissances: Cas général</title>
<statement> Soit <m>A</m> un ensemble de cardinalité fini, disons <m>|A|=n\in \ \N</m>, quelle est la cardinalité de <m>\mathscr{P}(A)</m> ? C'est-à-dire, qu'elle est la valeur de <m>|\mathscr{P}(A)|</m>? </statement>

<answer><m>|\mathscr{P}(A)|= 2^n</m> </answer>
<solution>
<p>Supposons qu'on ordonne les éléments de <m>A</m> d'une manière quelconque, c'est-à-dire qu'on les étiquette par <m>a_1,\ a_2\,\ \dots, a_n</m>. </p>
<p>On veut maintenant construire (choisir) un sous-ensemble <m>E</m> de <m>A</m>. Pour se faire, on regarde successivement chaque élément de <m>A</m>. Pour chaque élément <m>a_i</m>, il y a deux choix possibles. Soit <m>a_i\in\ E</m>, soit <m>a_i\notin\ E</m>. Par le principe du produit, il y a <m>2\times 2\times \cdots\times 2 =2^n</m> façons différentes de construire le sous-ensemble <m>E</m>. Ainsi, <m>\left|\mathscr{P}(A)\right|=2^n</m>.</p>
</solution>
</example>


<p>
  À la section, <xref ref="sec_arrCombinaison"/>, on étudiera plus en détail les permutations et les combinaisons. On introduit l'idée avec l'exemple <xref ref="ex-permIntro" text="custom">ci-dessous</xref>, ainsi qu'avec l'exemple <xref ref="ex-divIntro"/> .
</p>

<example xml:id="ex-permIntro">
  <title>Les permutations</title>
  <statement>Combien de "mots" différents peut-on écrire en utilisant les lettres du "mot" <m>ABCDE</m>? Ici, "mot" veut simplement dire une suite de lettres, même si le "mot" n'est pas un vrai mot en français (ou n'importe quelle autre langue). On dit aussi qu'il s'agit des permutations des lettres de <m>ABCDE</m>. </statement>
  <solution>
    <p>On utilise le principe du produit. On choisit la première lettre du mot, ensuite la deuxième, et ainsi de suite jusqu'à la dernière lettre.</p>
    <p>Pour la première lettre, on a <m>5</m> choix possibles. Pour la deuxième lettre, il reste <m>4</m> choix possibles. Pour la troisième lettre, il reste <m>3</m> choix possibles. Pour la quatrième lettre, il reste <m>2</m> choix possibles. Finalement, il ne reste que <m>1</m> choix pour la dernière lettre.</p>
    <p>Ainsi, il y a <m>5\times 4\times 3\times 2\times 1 =120</m> mots différents qu'on peut obtenir à partir des lettres de <m>ABCDE</m>.</p>
    <p> Ce problème est un exemple de permutations. On verra, <xref ref="sec_arrCombinaison" text="custom"> à la prochaine section </xref>, que le nombre de permutations de <m>5</m> objets est <m>5!</m>, où <xref ref="def_facto" text="custom"> la notation </xref> <m>k!</m> y sera également définie.</p>
  </solution>
  <solution>
    <p>Une solution alternative est de remarquer que d'écrire un mot utilisant les lettres de <m>ABCDE</m> est équivalent à choisir une fonction injective <m>f: \{1,2,3,4,5\}\to \{A,B,C,D,E\}</m>, où <m>f(i)</m> est la lettre à la position <m>i</m> du mot. Par exemple, les mots <m>ABCDE</m> et <m>EDCBA</m> sont équivalents aux fonctions <m>f_1</m> et <m>f_2</m> définies par 
    <md>
      <mrow>f_1(1)\amp=A \amp f_2(1)\amp=E </mrow>
      <mrow>f_1(2)\amp=B \amp f_2(2)\amp=D </mrow>
      <mrow>f_1(3)\amp=C \amp f_2(3)\amp=C </mrow>
      <mrow>f_1(4)\amp=D \amp f_2(4)\amp=B </mrow>
      <mrow>f_1(5)\amp=E \amp f_2(5)\amp=A </mrow>
    </md>
    </p>
    <p>Ainsi, le nombre de mots différents formés à partir des lettres de <m>ABCDE</m> est aussi le nombre de fonctions injectives de <m>\{1,2,3,4,5\}</m> vers <m>\{A,B,C,D,E\}</m>. Par l'exemple <xref ref="ex_comptFctInj"/>, on sait qu'il y en a <m>5\times 4\times 3\times 2\times 1 =120</m>. </p>
  </solution>
</example>

</subsection>

<subsection xml:id="subs-regleSomme" > 
<title>Principe de la somme</title>
<introduction>
<p>
  Il est parfois difficile d'utiliser le principe du produit directement pour dénombrer une situation. Cela  se produit souvent lorsque le nombre de façons d'accomplir une tâche dépend d'une condition. On doit alors compter le nombre de façons d'accomplir la tâche pour chaque condition, et ensuite additionner ces résultats. On commence par considérer un exemple très simple, avant d'énoncer ce principe.
</p>
</introduction>

<example xml:id="ex-regleSommeIntro">
  <title>Des lettres ou des chiffres</title>
  <statement>
    <p>
      Supposons que l'on doive créer un mot de passe composé de quatre caractères pour un site quelconque. Supposons qu'en plus tous les caractères doivent soit tous être une des <m>26</m> lettres de l'alphabet, ou bien ils doivent tous être un chiffre (de <m>0</m> à <m>9</m>). Combien de façons différentes y a-t-il de choisir un mot de passe?
    </p>
  </statement>
    <solution>
      <p>
        On sépare la tâche selon si on choisit d'utiliser des lettres ou des chiffres pour notre mot de passe.
      </p>
      <p>
        Si l'on choisit d'utiliser des lettres pour le mot de passe, on aura <m>26</m> choix pour chacun des caractères, et donc <m>26^4</m> choix possibles pour le mot de passe.
      </p>
      <p>
        Si par contre, on choisit d'utiliser des chiffres, alors on aura <m>10</m> choix pour chacun des caractères, et donc <m>10^4</m> choix possibles pour le mot de passe. 
      </p>
      <p>
        Au total, puisqu'on doit avoir des lettres ou des chiffres, il y aura <m>26^4+10^4=466\ 976</m> choix possibles.
      </p>
    </solution>
</example>

<p>
  Le principe utilisé à l'exemple précédent s'appelle le principe de la somme. On le nomme également le principe du OU, car on peut accomplir la tâche d'une première façon OU d'une deuxième façon. En langage plus formel, le principe de la somme peut s'énoncer de deux façons. 
</p>

<proposition xml:id="prop-regleSomme">
<title>Principe de la somme</title>
<ol>
<li>Si une tâche peut soit être effectuée de <m>n_1</m> façons, soit de <m>n_2</m> façons, et que toutes les <m>n_1</m> façons sont différentes des <m>n_2</m> façons, alors il y a <m>n_1+n_2</m> façons d'effectuer la tâche. </li>
<li>Soit <m>A</m> et <m>B</m> deux ensembles tels que <m>A\cap B =\emptyset</m>, c'est-à-dire que <m>A</m> et <m>B</m> sont disjoints, alors <m>|A\cup B|=|A|+|B|</m></li>
</ol>
</proposition>

<p>
  On montre ici comment utiliser le principe de la somme dans le cas le plus simple. Dans les faits, on devra souvent utiliser le principe à plusieurs reprises, ou bien le combiner au principe du produit.
</p>

<example xml:id="ex-baseSomme">
<title>Exemple de base du principe de la somme</title>
<statement>Supposons que le Cégep Gérald-Godin veut choisir, parmi les professeurs en mathématiques ou les professeurs en informatique, un représentant du programme de SIM pour siéger sur un comité exécutif. Sachant qu'il y a <m>9</m> professeurs en mathématiques et <m>7</m> professeurs en informatique. Combien de façons y a-t-il de choisir ce représentant, en supposons qu'un professeur ne peut pas être à la fois un professeur d'informatique et un professeur de mathématique?</statement>
<solution>Il y a <m>9</m> façons de choisir un professeur de mathématiques, alors qu'il y a <m>7</m> façons de choisir un professeur d'informatique. Puisque le représentant est soit un professeur de mathématiques, soit un professeur d'informatique, il y a <m>9+7=16</m> façons différentes de choisir un tel représentant.</solution>
<answer><m>16</m></answer>
</example>
<p>Évidemment, il est souvent utile de séparer une tâche en plus de deux choix. On peut alors utiliser le principe de la somme à plusieurs reprises, tel qu'illustré à l'exemple <xref ref="ex-baseSommeSuccessive"/> .</p>
<example xml:id="ex-baseSommeSuccessive">
<title>Utilisation successive du principe de la somme</title>
<statement>Un élève d'un cours d'informatique doit choisir pour l'évaluation finale,  un projet parmi trois listes selon le langage de programmation utilisé. S'il y a <m>15</m> projets possibles en C, <m>12</m> projets possibles en python et <m>7</m> projets possibles en Pascal, combien de projets différents est-ce qu'un élève peut choisir?</statement>
<solution>Lorsqu'un élève choisit son projet, il peut soit choisir de le faire en C, soit en python ou soit en Pascal. S'il choisit de le faire en C, il aura <m>15</m> choix possibles. S'il choisit de le faire en python, il en aura <m>12</m>, alors que s'il le fait en Pascal, il n'en aura que <m>7</m>. Si on utilise le principe de la somme à deux reprises, on a qu'il y a <m>15+12+7=34</m> façons de choisir un projet pour l'évaluation finale. </solution>
<answer><m>34</m></answer>
</example>
</subsection>


<subsection xml:id="subs-combProdSomme1">
  <title>Combinaison du principe du produit et du principe de la somme</title>
  <introduction>
    <p>
      Tel que mentionné précédemment, il est souvent nécessaire de combiner le principe de la somme avec le principe du produit. Souvent, on commence par utiliser le principe de la somme pour séparer la tâche selon certaines conditions, et ensuite on utilise le principe du produit pour dénombrer le nombre de façons d'exécuter la tâche sous chacune des conditions. C'est ce qu'on a fait à l'exemple <xref ref="ex-regleSommeIntro"/>.
    </p>
  </introduction>


<example xml:id="ex-combProdSomme1">
<title> Nombre de variables en BASIC </title>
<statement>
<p>Dans une version du langage informatique BASIC, le nom d'une variable doit être une chaîne de caractères formée d'un ou de deux caractères alphanumériques. Un caractère alphanumérique est soit une des <m>26</m> lettres de l'alphabet ou bien un chiffre de <m>0</m> à <m>9</m>.</p>
<p>De plus, le premier caractère doit toujours être une lettre, et il existe <m>5</m> noms de variables formées de deux caractères qui sont des variables protégées, c'est-à-dire qu'on ne peut pas donner ces noms à nos variables. Combien de noms de variables différents peut-on avoir dans cette version de BASIC?</p>
</statement>
<solution>
<p>Soit <m>V</m> le nombre de noms de variables possible. Soit aussi <m>V_1</m> le nombre de ces noms formés d'un seul caractère, et soit <m>V_2</m> le nombre des noms formés de deux caractères. Ainsi, par le principe de la somme, on aura <m>V=V_1+V_2</m>.</p>
<p>Pour <m>V_1</m>. Puisque le premier caractère doit être une lettre, il y a seulement <m>26</m>possibilités, c'est-à-dire <m>V_1=26</m>.</p>
<p>Pour <m>V_2</m>. On doit choisir le premier caractère, qui doit être une lettre (donc <m>26</m> possibilités), et ensuite le deuxième caractère qui peut être soit une lettre soit un chiffre (par le principe de la somme, il y a <m>26+10=36</m> possibilités). Ainsi, par le principe du produit, il y a <m>26\cdot 36=936</m> possibilités. Cependant, on doit retirer les <m>5</m> possibilités représentant les noms réservés. On a donc <m>V_2=936-5=931</m>.</p>
<p>Finalement, on obtient <m>V=V_1+V_2=26+931=957</m>.</p>
</solution>
<answer><m>957</m></answer>
</example>

<p>
  Bien que le principe de la somme et le principe du produit soient relativement simples en principe, ils n'est pas toujours si simples de voir comment les utiliser pour répondre à un problème de dénombrement. Ceci peut rendre la résolution de problèmes de dénombrement particulièrement frustrant... Voici un exemple où il faut utiliser d'un peu plus d'intuition pour trouver la solution.
</p>

<example xml:id="ex_sousEnsPair">
<title>Sous-ensembles de cardinalité paire</title>
<introduction> Soit <m>E</m> un ensemble fini de cardinalité <m>n</m>. Combien de sous-ensembles de <m>E</m> ont une cardinalité paire si:</introduction>
<task>
<statement><m>n=4</m>;</statement>
<answer><m>2^{3}</m></answer>
<solution>
  <p>Supposons que <m>E=\{e_1, e_2, e_3, e_4\}</m>. Puisque l'ensemble est de cardinalité relativement petite, on peut essayer d'énumérer ces sous-ensembles de cardinalité paire. On obtient alors
<md>
  <mrow> E_1\amp=\{e_3, {\color{red}e_4}\}  \amp  E_2\amp=\{\} </mrow>
  <mrow>E_3\amp= \{e_1, {\color{red}e_4}\}\amp E_4\amp=\{e_1,e_2\}   </mrow>
  <mrow>E_5\amp= \{e_2, {\color{red}e_4}\} \amp E_6\amp =\{e_1,e_3\}  </mrow>
  <mrow>E_7\amp= \{e_1, e_2, e_3, {\color{red}e_4}\} \amp E_8\amp  = \{e_2,e_3\}.</mrow>
</md>
</p>
<p>
  Avant de considérer le cas général, on fait quelques remarques. Notons <m>A=E-\{e_4\}=\{e_1, e_2, e_3\}</m>. On peut voir que le nombre de sous-ensembles de cardinalité pair de <m>E</m> est équivalent au nombre de sous-ensembles de <m>A</m>. En effet, on peut voir un lien entre ceux-ci si on liste les sous-ensembles de <m>A</m>.
  <md>
    <mrow> A_1\amp=\{e_3\}  \amp  A_2\amp=\{\} </mrow>
    <mrow>A_3\amp= \{e_1\}\amp A_4\amp=\{e_1,e_2\}   </mrow>
    <mrow>A_5\amp= \{e_2\} \amp A_6\amp =\{e_1,e_3\}  </mrow>
    <mrow>A_7\amp= \{e_1, e_2, e_3\} \amp A_8\amp  = \{e_2,e_3\}.</mrow>
  </md>
</p>
<p>
  Si on compare les sous-ensembles <m>E_i</m> aux sous-ensembles <m>A_i</m>, on remarque que ceux ayant un indice pair  sont égaux, c'est-à-dire que <m>E_2=A_2</m>, <m>E_4=A_4</m>, <m>E_6=A_6</m> et <m>E_8=A_8</m>. De même, chaque sous-ensemble <m>E_i</m> ayant un indice impair est obtenu à partir du sous-ensemble <m>A_i</m>, auquel on a ajouté l'élément <m>\color{red}e_4</m>, c'est-à-dire que <m>E_1=A_1\cup \{{\color{red}e_4}\}</m>, <m>E_3=A_3\cup \{{\color{red}e_4}\}</m>, <m>E_5=A_5\cup \{{\color{red}e_4}\}</m> et <m>E_7=A_7\cup \{{\color{red}e_4}\}</m>.
</p>
<p>
  On utilisera cette remarque pour déterminer la solution dans le cas général.
</p>
</solution>
</task>
<task>
<statement><m>n</m> est un entier quelconque.</statement>
<answer><m>2^{n-1}</m>.</answer>
<solution> 
<p>Supposons qu'on écrit <m>E=\{e_1,\dots,e_n\}</m> et posons <m>A=E-\{e_n\}</m>. Notons <m>P</m> le nombre de sous-ensembles de <m>E</m> de cardinalité pair. On choisit <m>X</m> un sous-ensemble de cardinalité pair de la façon suivante. Tout d'abord, on remarque que soit <m>e_n\in\, X</m>, ou bien <m>e_n\notin\, X</m>. Ainsi, par le principe de la somme, on a que <m>P=P_1+P_2</m>, où <m>P_1</m> est le nombre de sous-ensembles de cardinalité paire contenant <m>e_n</m>, et <m>P_2</m> le nombre de ces sous-ensembles qui ne contiennent pas <m>e_n</m>.</p>
<p> D'un côté, on remarque que  <m>e_n\notin\, X</m> si et seulement si <m>X\subseteq A</m> et <m>|X|</m> est pair. Ainsi, <m>P_1</m> est le nombre de sous-ensembles de <m>E-\{e_n\}</m> de cardinalité paire.</p>
<p>De l'autre côté, on remarque aussi que <m>e_n\in\, X</m> si et seulement si <m>X-\{e_n\}\subseteq A</m> avec <m>|X-\{e_n\}|</m> impair. Ainsi, <m>P_2</m> est le nombre de sous-ensembles de <m>E-\{e_n\}</m> de cardinalité impair.</p>
<p>Par ce qui précède, on a que <m>P=P_1+P_2</m> est aussi le nombre de sous-ensembles de <m>A</m>. Or, on sait que ce nombre est <m>|\mathscr{P}\left(A\right)|=2^{n-1}</m>.</p>
</solution>
</task>
</example>

<p>Dans certains problèmes de dénombrement, il arrive qu'au moins une des tâches doive être accomplie d'une certaine façon, en ajoutant une restriction quelconque. Dans ce cas, il est souvent plus utile de compter toutes les façons possibles d'accomplir la tâche, et de lui soustraire les façons d'accomplir la tâche qui ne respectent pas la restriction. On utilise alors le principe de la somme "à l'envers". Ce genre d'argument est très utile lorsqu'on voit les mots "au moins un" dans l'exercice.</p>
<example xml:id="ex-combProdSomme2">
<title>Nombre de mots de passe</title>
<statement> Un site internet vous demande de choisir un mot de passe lors de la création de votre compte. Ce mot de passe doit être formé de <m>6,\ 7\text{ ou }8</m> caractères alphanumériques. De plus, chaque mot de passe doit contenir au moins un chiffre. Combien de mots de passe possible y a-t-il?</statement>
<solution>
<p>On note <m>P</m> le nombre de mots de passe total, et <m>P_i</m> le nombre de mots de passe à <m>i</m> caractères, pour <m>i\in\ \{6,\ 7,\ 8\}</m>. Par le principe de la somme, on a <m>P=P_6+P_7+P_8</m>.</p>
<p>Pour calculer <m>P_6</m>, on compte tous les mots de passe à <m>6</m> caractères. Par la suite, on lui soustrait le nombre de mots de passe à <m>6</m> caractères qui ne contiennent pas de chiffres. En effet, par le principe de la somme <m>\text{Mots de passe à }6\text{ caractères }=\text{Mots de passe à }6\text{ caractères sans chiffre}+\text{Mots de passe à }6\text{ caractères avec chiffres}</m>, et donc <m>\text{Mots de passe à }6\text{ caractères avec chiffres}=\text{Mots de passe à }6\text{ caractères }-\text{Mots de passe à }6\text{ caractères sans chiffres}</m>.</p>
<p>Par le principe du produit, il y a <m>36^6</m> chaîne de <m>6</m> caractères alphanumériques. De plus, <m>26^6</m> de ces chaînes ne contiennent que des lettres, c'est-à-dire ne contiennent pas de chiffres. Ainsi, par l'argument donné au paragraphe précédent, <m>P_6=36^6-26^6=2\ 176\ 782\ 336-308\ 915\ 776=1\ 867\ 866\ 560</m>. On utilise le même argument pour <m>P_7</m> et <m>P_8</m>.</p>
<p>Pour <m>P_7</m>, on obtient <m>P_7=36^7-26^7= 70\ 332\ 353\ 920 - 78\ 364\ 164\ 096 = 8\ 031\ 810\ 176</m></p>
<p>Pour <m>P_8</m>, on obtient <m>P_8=36^8-26^8= 2\ 821\ 109\ 907\ 456 - 208\ 827\ 064\ 576 =2\ 612\ 282\ 842\ 880</m></p>
<p>Ainsi, on a <m>P = P_6+P_7+P_8=2\ 684\ 483\ 063\ 360</m>.</p>
</solution>
<answer><m>
2\ 684\ 483\ 063\ 360
</m></answer>
</example>
</subsection>

<subsection xml:id="subs-incExclu">
<title>Le principe d'inclusion-exclusion (ou de la soustraction )</title>
<introduction>
   Il arrive que, lorsqu'on sépare les façons d'effectuer une tâche en deux catégories, certaines des façons d'effectuer la tâche se retrouvent dans les deux catégories. Dans ce cas, on ne peut pas simplement utiliser le principe de la somme, car on compte les éléments qui se trouvent dans les deux catégories deux fois.
</introduction>

  <example xml:id="ex-incluExcluIntro">
    <title>Le nombre de costumes bleus ou vert!</title>
  <statement><p>Supposons qu'un de vos amis doit choisir un costume pour animer un spectacle. Si votre ami  doit choisir parmi 5 chapeaux dont 3 sont bleus, 2 chandails et 6 pantalons, dont 4 sont verts. De combien de façons différentes peut-il s'habiller, s'il doit porter un chapeau bleau ou un pantalon vert? </p></statement>
  <solution>
    <p>On note <m>C</m> le nombre de costumes avec chapeau bleu ou pantalon vert. Pour déterminer <m>C</m>, on sépare la tâche de choisir le costume en deux catégories: la première catégorie est celle formée des costumes avec un chapeau bleu, alors que la deuxième est celle formée des costumes avec un pantalon vert.</p>
    <p>On note <m>C_b</m> le nombre de costumes avec chapeau bleu, et <m>C_v</m> le nombre de costumes avec un pantalon vert. Par le principe du produit, on a que <m>C_b=3\times 2\times 6 =36</m>. De même, on obtient  <m>C_v=5\times 2\times 4=40</m></p>
    <p>Cependant, <m>C\neq C_b+C_v</m>! En effet, dans l'expression <m>C_b+C_v</m>, on a compté les costumes avec chapeau bleu <em>et</em> pantalon vert deux fois. Une fois dans <m>C_b</m>, et une fois dans <m>C_v</m>.  </p>
    <p>Ainsi, on note <m>C_{bv}</m> le nombre de costumes avec chapeau bleu et pantalon vert. On obtient <m>C_{bv}=3\times 2\times 4=24 </m>. On a alors <m>C=C_b+C_v-C_{bv}=36+40-24=52</m>.</p>  
  </solution>
  </example>
  <remark>
    <p>On aurait pu résoudre l'exemple <xref ref="ex-incluExcluIntro"/> en séparant le choix des costumes en trois catégories, les costumes avec chapeau bleu mais pantalon non vert (il y en a <m>3\times 2\times 2= 12</m>), les costumes avec chapeau bleu et pantalon vert (il y en a <m>24</m> ), et finalement les costumes avec chapeau non bleu et pantalon vert (il y en a <m>2\times 2\times 4=16</m>).</p> 
    <p>De cette façon, on peut utiliser le principe de la somme directement et obtenir le nombre de costumes avec chapeau bleu ou pantalon vert, qui est <m>12+24+16=52</m>. </p>
  </remark>
  <p>
    Le principe utilisé à l'exemple <xref ref="ex-incluExcluIntro"/> est le principe d'inclusion-exclusion. Il s'agit du même principe que celui de la formule <xref ref="exo-incexc"/>. On énonce le principe de deux façons différentes.
  </p>
  
<proposition xml:id="prop-incExclu">
<title>Principe d'inclusion-exclusion</title>
<statement>
<ol>
<li>Supposons qu'on peut séparer les façons d'effectuer une tâche en deux catégories. Si la première catégorie est formée de <m>n_1</m> façons d'accomplir la tâche, la deuxième catégorie  est formée de <m>n_2</m> façons d'accomplir la tâche, et si <m>n_3</m> de ces façons d'accomplir la tâche font partie des deux catégories en même temps, alors il y a <m>n_1+n_2-n_3</m> façons d'effectuer la tâche.</li>
<li>Soit <m>A</m> et <m>B</m> deux ensembles, alors <m>|A\cup B|=|A|+|B|-|A\cap B|</m></li>
</ol>
</statement>
</proposition>
</subsection>

<example xml:id="ex-incExclu">
<title>Exemple de base du principe d'inclusion-exclusion</title>
<statement>Une chaîne binaire est une chaîne de caractères où chaque caractère est soit un <m>1</m>, soit un <m>0</m>. Combien de chaînes binaires de longueur <m>8</m> qui commencent par un <m>1</m> ou finissent avec deux <m>0</m> ?</statement>
<solution><p>Soit <m>B</m> le nombre de chaînes binaires voulues, et soit <m>B_1</m> le nombre de chaînes binaires de longueur <m>8</m> commençant par un <m>1</m> et <m>B_{00}</m> le nombre de chaînes binaires de longueur <m>8</m> se terminant avec deux <m>0</m>.</p> 
<p>Si on utilise directement le principe de la somme (de façon erronée), on obtient 
<me>B=B_1+B_{00}.</me>
Cependant, on ne peut pas utiliser le principe de la somme, car il existe des chaînes binaires de longueur <m>8</m> qui commencent par un <m>1</m> <alert>ET</alert> se terminent par deux <m>0</m>. On note le nombre de ces chaînes <m>B_{100}</m>.</p>
<p>Ainsi, par le principe d'inclusion-exclusion, on a <me>B=B_1+B_{00}-B_{100}.</me></p>
<p>Par le principe du produit, on a que <m>B_1=2^7</m>. En effet, chaque caractère, sauf le premier (qui est fixé à <m>1</m>), peut être un <m>1</m> ou un <m>0</m>. Il reste donc <m>7</m> choix à faire, avec <m>2</m> possibilités pour chaque choix.</p>
<p>De même, on peut voir que <m>B_{00}= 2^6</m>, car cette fois deux des caractères sont fixés.</p>
<p>Enfin, on peut également voir par le principe du produit que <m>B_{100}=2^5</m>, car trois des caractères sont fixés.</p>
<p>Finalement, on a 
<md>
<mrow>B\amp=B_1+B_{00}-B_{100}=2^7+2^6-2^5</mrow>
<mrow>\amp=1000\ 0000_2+100\ 0000_2-10\ 0000_2</mrow>
<mrow>\amp=1010\ 0000_2=160</mrow>
</md></p>
</solution>
<answer><m>160</m></answer>
</example>

<subsection xml:id="subs-div">
<title>Le principe de la division</title>
<introduction>
  <p>Une technique de dénombrement intéressante pour obtenir certaines égalités de manière très efficace est de compter la même chose de deux façons différentes. On peut se servir de cette idée lorsqu'on utilise le principe du produit de deux façons différentes pour la même tâche. Ceci nous permettra de simplifier certains problèmes de dénombrement.</p>
  <p>Par exemple, on considère deux problèmes similaire, mais pour lesquels celui qui semble plus complexe est simple à résoudre.</p>
  <p> D'un côté,  supposons qu'on doive choisir trois personnes dans un groupe de quatre, sans leur attribuer un rôle particulier. Ceci est équivalent à dénombrer les sous-ensembles <m>X\subseteq A</m>, avec <m>|X|=3</m> et <m>|A|=4</m>. Avec de petites cardinalités, on peut simplement énumérer les sous-ensembles <m>X</m>. Cependant, il est à priori difficile de dénombrer cette situation avec des cardinalités plus élevées. </p>
  <p>D'un autre côté, supposons qu'on doive choisir un président, un vice-président et un trésorier parmi un groupe de quatre personnes. En utilisant le principe du produit, il est facile de compter le nombre de façons d'accomplir cette tâche.</p>
  <p>On remarque qu'on peut séparer la tâche de choisir un président, un vice-président et un trésorier  parmi quatre personnes en deux étapes. Tout d'abord on choisit les trois personnes parmi quatre, et ensuite on choisit leur rôle. Étonnamment, il est plus difficile de compter le nombre de façons de choisir trois personnes, que de choisir trois personnes avec un rôle.</p> 
  <p>L'exemple ci-dessous nous permettra de montrer comment utiliser le lien entre ces deux situations pour dénombrer le nombre de façons de choisir trois personnes parmi quatre sans rôle.</p>
</introduction>

<example xml:id="ex-divIntro">
  <title>Choisir trois personnes parmi quatre</title>
  <introduction>
    <p>
      On doit choisir trois personnes parmi un groupe de quatre personnes afin de former un comité. 
    </p>
  </introduction>
  <task xml:id="ex-divAvecOrdre">
    <statement>
      <p>
        De combien de façons peut-on choisir ces trois personnes, si on doit choisir un président, un vice-président et un trésorier?
      </p>
    </statement>
    <solution>
      <p>
        On doit choisir un président, et ensuite choisir un vice-président, et finalement choisir un trésorier. Par le principe du produit, il y a <m>4\times 3\times 2 =24</m> façons de former le comité.
      </p>
    </solution>
  </task>
  <task xml:id="ex-divSansOrdre">
    <statement>
      <p>
        De combien de façons peut-on choisir ces trois personnes, si on ne leur attribue pas un rôle particulier?
      </p>
    </statement>
    <solution>
      <p>
         Tout d'abord, on rappel qu'en <xref ref="ex-divAvecOrdre"/>, on a vu qu'il y a <m>24</m> façons de choisir un président, un vice-président et un trésorier. Ensuite, on remarque qu'on peut séparer cette tâche en deux étapes.
      </p>
      <p>
        Premièrement, on choisit trois personnes parmi quatre. On note <m>C_3^4</m> le nombre de façons d'accomplir cette étape. Ensuite, on choisit un rôle pour chacune des personnes. À l'aide du principe du produit, on sait qu'il y a <m>3\times 2\times 1 =6</m> façons d'accomplir cette étape. 
      </p>
      <p>
        Ainsi, on sait que <m>24=C_3^4\times 6</m>. On peut alors isoler <m>C_3^4</m> pour obtenir <m>C_3^4=\frac{24}{6}=4</m>.
      </p>
    </solution>
  </task>
</example>
<p>
  Le principe utilisé à l'exemple précédent s'appelle le principe de la division. Il est basé sur le principe du produit, et on peut l'énoncer de trois façons différentes.
</p>
<proposition  xml:id="prop-div">
<title>Principe de la division</title>
<statement> 
<ol>
<li>S'il est possible d'accomplir une procédure de <m>n</m> façons, mais que pour chacune de ces façons, il y a exactement <m>d</m> façons qui sont équivalentes, alors il y aura <m>\frac{n}{d}</m> façons différentes d'accomplir la tâche.</li>
<li>Soit <m>A</m> et <m>B</m> deux ensembles finis et non vides, alors <m>|A|=\frac{|A\times B|}{|B|}</m>.
</li>
<li>Si <m>f: A\rightarrow B</m> est une fonction de <m>A</m> vers <m>B</m> deux ensembles finis, et si pour chaque <m>b\in\ B</m>, il existe exactement <m>d\gt 0</m> préimages de <m>b</m>, c'est-à-dire que <m>\left|f^{-1}(b)\right|=d</m>, alors <m>|B|=\frac{|A|}{d}</m></li>
</ol>
</statement>
</proposition>

<example xml:id="ex-div">
<title>Exemple de base du principe de la division</title>
<statement> <p>Supposons qu'il faille placer quatre personnes, Damien, Jean-Michel, Alexandre et Valérie, autour d'une table ronde (à quatre chaises).</p> 
  <p> De combien de façons différentes peut-on accomplir cette tâche, si deux façons de s'assoir sont considérées les mêmes si chaque personne possède le même voisin à gauche et le même voisin à droite. </p> </statement>
<answer><m>6</m></answer>
<solution>
<p> On commence par assigner une première chaise à Valérie. Celle-ci choisit arbitrairement une chaise qu'on numérote par <m>1</m>. Ensuite, on numérote les autres chaises de <m>2</m> à <m>4</m> de façon systématique (disons en tournant dans le sens horaire). Il y aura <m>4</m> façons différentes de faire ceci, car le résultat dépend uniquement du choix de Valérie.</p>
<p> Par la suite, on assigne arbitrairement une personne à la chaise <m>2</m> (il y aura <m>3</m> façons de faire ce choix).  On continue pour la chaise <m>3</m> (<m>2</m> façons) et finalement la chaise <m>4</m> ( <m>1</m> seule façon de faire).</p>
<p>Par le principe du produit, il y a <m>4\cdot 3\cdot 2\cdot 1 = 4!=24</m> façons d'accomplir cette tâche.</p>
<p>Cependant, on se rend compte que le choix de la première chaise n'a pas d'impacte sur l'arrangement final, car on distingue deux arrangements seulement si les voisins des gens sont différents. Par le principe de la division, on doit diviser par <m>4</m> le résultat précédent, et il y aura donc <m>\frac{24}{4}=6</m> façons différentes d'assoir les gens.</p>
</solution>
</example>

</subsection>




<conclusion xml:id="concl-prodSomme">  <!-- Ajouter le même identifiant de la section après le - du xml:id -->
    <p>
      Dans les problèmes de dénombrement, on remarque qu'une petite modification à une question peut entraîner une grande différence dans la méthode de résolution. Il est alors important d'utiliser le bon principe au bon moment.  
    </p>
    <p>
      On remarque également que, pour résoudre certains problèmes, il est parfois plus facile de transformer celui-ci en un problème déjà résolu. À la section <xref ref="sec_arrCombinaison"/>, on introduit quelques cas de base qui nous serviront à résoudre une grande partie des problèmes de dénombrement.
    </p>
    <p>Les points importants de cette section sont:
    <ul>
    <li><p>Le <xref ref="prop-regleProd" text="custom">principe du produit</xref>;</p></li>
    <li><p>Le <xref ref="prop-regleSomme" text="custom">principe de la somme</xref>;</p></li>
    <li><p>Le <xref ref="prop-incExclu" text="custom">principe d'inclusion-exclusion</xref>;</p></li>
    <li><p>Le <xref ref="prop-div" text="custom">principe de la division</xref>;</p></li>
    </ul>
    </p>
    </conclusion>
    <reading-questions xml:id="rq-prodSomme">
    <introduction>
    <p>Ces questions sont à faire avant de venir en classe et à remettre au début du cours.</p>
    </introduction>

<exercise>
<introduction>
<p>Un test est formé de <m>10</m> questions à choix multiples. Chaque question possède <m>4</m> réponse possible.</p>
</introduction>
<task>
<statement>De combien de façons un étudiant peut-il répondre aux questions s'il répond à toutes les questions?</statement>
</task>
<task>
<statement>De combien de façons un étudiant peut-il répondre aux questions s'il peut laisser une réponse vide à certaines questions?</statement>
</task>
</exercise> 

<exercise>
  <statement><p>Une marque populaire de vêtements produit des chandails en <m>12</m> couleurs, en version à manches courtes ou à manches longues et est offert en trois tailles différentes. Combien de types de chandails différents sont produit par cette marque?</p></statement>
</exercise>

 <exercise><introduction><p>Combien d'entiers <m>0\leq n \lt 100</m>:</p></introduction>
      <task><statement><p>sont divisible par <m>7</m>?</p></statement></task>
      <task><statement><p>sont divisible par <m>7</m>, mais pas par <m>11</m>?</p></statement></task>
      <task><statement>sont divisible par <m>7</m> et par <m>11</m>?</statement></task>
      <task><statement>sont divisible par <m>7</m> ou par <m>11</m>?</statement></task>
      <task><statement>sont divisible par exactement un des entiers <m>7</m> ou <m>11</m>?</statement></task>
      <task><statement>ne sont divisible ni par <m>7</m> ni par <m>11</m>?</statement></task>
      <task><statement>ont des chiffres différents les uns des autres?</statement></task>
      <task><statement>ont des chiffres différents les uns des autres et sont pair?</statement></task>
 </exercise>


   <exercise>
  <introduction>
  <p>On considère des chaînes de trois caractères de chiffres en base <m>10</m>. Combien de ces chaînes:</p>
  </introduction>
  <task><statement><p> ne contiennent pas le même chiffre trois fois?</p></statement></task> 
  <task><statement><p>ont exactement deux chiffres qui sont des <m>4</m>?</p></statement></task>
  </exercise>

    <exercise>
    <statement><p>Noter toute question qui demeure suite à la lecture de la section et la résolution des exercices ci-dessus ou toute précision/clarification à apporter. Note: cette question est facultative.</p></statement>
    </exercise>
    </reading-questions>
   <!--Inclure les exercices de la section ci-dessous--> 
<xi:include href="Exercices_prodSomme.ptx"/>



</section>
